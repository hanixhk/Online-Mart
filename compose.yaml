name: ai-mart-platform

services:
  api:
    image: todo-mart-api
    build:
      context: ./todo
      dockerfile: Dockerfile.dev
    restart: always # Any Issue when RUnning Contianer = ShutDown
    volumes:
      - ./todo:/code # Sync local development directory with the container
    depends_on:
      - postgres_db
      - broker
    ports:
      - "8009:8000" # Expose container port 8000 to host port 8000

  api2:
    image: ms2-mart-api
    build:
      context: ./microservice_02
      dockerfile: Dockerfile.dev
    volumes:
      - ./microservice_02:/code # Sync local development directory with the container
    depends_on:
      - broker
    ports:
      - "8002:8000" # Expose container port 8000 to host port 8000

  kong:
    image: kong:3.4
    restart: always
    depends_on:
    - kong-db
    - broker
    - postgres_db
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-db
      KONG_PG_DATABASE: kong
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
      KONG_DECLARATIVE_CONFIG: /usr/local/kong/declarative/kong.yml
      KONG_DECLARATIVE_MODE: "replace"
    ports:
    - "8000:8000"  # Proxy port
    - "8001:8001"  # Admin API port
    volumes:
    - ./kong.yml:/usr/local/kong/declarative/kong.yml
    - kong_config:/usr/local/kong/declarative


  product-service:
    image: product-mart-api
    build:
      context: ./product-service
      dockerfile: Dockerfile.dev
    volumes:
      - ./product-service:/code # Sync local development directory with the container
    depends_on:
      - broker
      - postgres_product_db
    ports:
      - "8003:8000" # Expose container port 8000 to host port 8000

  inventory-service:
    image: inventory-mart-api
    build:
      context: ./inventory-service
      dockerfile: Dockerfile.dev
    volumes:
      - ./inventory-service:/code # Sync local development directory with the container
    depends_on:
      - broker
      - postgres_inventory_db
    ports:
      - "8004:8000" # Expose container port 8000 to host port 8000
    environment:
    - BOOTSTRAP_SERVER=broker:19092

  order-service:
    build:
      context: ./order-service
      dockerfile: Dockerfile.dev
    image: order-mart-api
    restart: always
    volumes:
      - ./order-service:/code
    depends_on:
      - postgres_order_db
      - broker
    ports:
      - "8005:8000"  # Exposing Order Service on port 8004

  user-service:
    build:
      context: ./user-service
      dockerfile: Dockerfile.dev
    image: user-mart-api
    restart: always
    volumes:
      - ./user-service:/code
    depends_on:
      - broker
      - postgres_user_db
    ports:
      - "8006:8000"  # Exposing User Service on port 8001

  payment-service:
    build:
      context: ./payment-service
      dockerfile: Dockerfile.dev
    image: user-mart-api
    restart: always
    volumes:
      - ./payment-service:/code
    depends_on:
      - broker
      - postgres_payment_db
    ports:
      - "8007:8000"  # Exposing User Service on port 8007
    
  notification-service:
    build:
      context: ./notification-service
      dockerfile: Dockerfile.dev
    image: user-mart-api
    restart: always
    volumes:
      - ./notification-service:/code
    depends_on:
      - broker
      - postgres_notification_db
    ports:
      - "8008:8000"  # Exposing notification Service on port 8008


  postgres_db:
    image: postgres:latest # Use the official PostgreSQL image
    restart: always
    container_name: PostgresCont
    environment:
      - POSTGRES_USER=ziakhan
      - POSTGRES_PASSWORD=my_password
      - POSTGRES_DB=mydatabase
    ports:
      - "5483:5432"
    volumes:
      - postgres_db:/var/lib/postgresql/data

  postgres_product_db:
    image: postgres:latest # Use the official PostgreSQL image
    restart: always
    container_name: PostgresProductsCont
    environment:
      - POSTGRES_USER=ziakhan
      - POSTGRES_PASSWORD=my_password
      - POSTGRES_DB=mydatabase
    ports:
      - "5484:5432"
    volumes:
      - postgres_product_db:/var/lib/postgresql/data

  postgres_inventory_db:
    image: postgres:latest # Use the official PostgreSQL image
    restart: always
    container_name: PostgresInventoryCont
    environment:
      - POSTGRES_USER=ziakhan
      - POSTGRES_PASSWORD=my_password
      - POSTGRES_DB=mydatabase
    ports:
      - "5485:5432"
    volumes:
      - postgres_inventory_db:/var/lib/postgresql/data

  postgres_order_db:
    image: postgres:latest # Use the official PostgreSQL image
    restart: always
    container_name: PostgresOrderCont
    environment:
      - POSTGRES_USER=ziakhan
      - POSTGRES_PASSWORD=my_password
      - POSTGRES_DB=mydatabase
    ports:
      - "5486:5432"
    volumes:
      - postgres_order_db:/var/lib/postgresql/data

  postgres_user_db:
    image: postgres:latest # Use the official PostgreSQL image
    restart: always
    container_name: PostgresUserCont
    environment:
      - POSTGRES_USER=ziakhan
      - POSTGRES_PASSWORD=my_password
      - POSTGRES_DB=mydatabase
    ports:
      - "5487:5432"
    volumes:
      - postgres_user_db:/var/lib/postgresql/data

  postgres_notification_db:
    image: postgres:latest # Use the official PostgreSQL image
    restart: always
    container_name: PostgresNotificationCont
    environment:
      - POSTGRES_USER=ziakhan
      - POSTGRES_PASSWORD=my_password
      - POSTGRES_DB=mydatabase
    ports:
      - "5488:5432"
    volumes:
      - postgres_notification_db:/var/lib/postgresql/data

  postgres_payment_db:
    image: postgres:latest # Use the official PostgreSQL image
    restart: always
    container_name: PostgresPaymentCont
    environment:
      - POSTGRES_USER=ziakhan
      - POSTGRES_PASSWORD=my_password
      - POSTGRES_DB=mydatabase
    ports:
      - "5489:5432"
    volumes:
      - postgres_payment_db:/var/lib/postgresql/data

  kong-db:
    image: postgres:13
    environment:
      - POSTGRES_USER=kong
      - POSTGRES_DB=kong
      - POSTGRES_PASSWORD=kong
    ports:
      - "15432:5432"
    volumes:
      - kong_db_data:/var/lib/postgresql/data


  broker:
    image: apache/kafka:3.7.0
    hostname: broker
    container_name: broker
    ports:
      - "9098:9092"
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT"
      KAFKA_ADVERTISED_LISTENERS: "PLAINTEXT_HOST://localhost:9092,PLAINTEXT://broker:19092"
      KAFKA_PROCESS_ROLES: "broker,controller"
      KAFKA_CONTROLLER_QUORUM_VOTERS: "1@broker:29093"
      KAFKA_LISTENERS: "CONTROLLER://:29093,PLAINTEXT_HOST://:9092,PLAINTEXT://:19092"
      KAFKA_INTER_BROKER_LISTENER_NAME: "PLAINTEXT"
      KAFKA_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
      CLUSTER_ID: "4L6g3nShT-eMCtK--X86sw"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_LOG_DIRS: "/tmp/kraft-combined-logs"

  # kafka:
  #   image: bitnami/kafka:3.4.0
  #   container_name: kafka
  #   ports:
  #     - "9092:9091"
  #   environment:
  #     - KAFKA_MODE=kraft
  #     - KAFKA_LISTENERS=PLAINTEXT://0.0.0.0:9092
  #     - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
  #     - KAFKA_NUM_BROKERS=1
  #     - KAFKA_PROCESS_ROLES=broker
  #     - KAFKA_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
  #     - KAFKA_CONTROLLER_LISTENER_NAMES=CONTROLLER
  #     - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
  #     - KAFKA_INTER_BROKER_LISTENER_NAME=PLAINTEXT
  #     - KAFKA_LOG_DIRS=/bitnami/kafka/logs
  #     - ALLOW_PLAINTEXT_LISTENER=yes
  #   volumes:
  #     - kafka_data:/bitnami/kafka
  #   healthcheck:
  #     test: ["CMD", "curl", "-f", "http://localhost:9092"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5


  kafka-ui:
    image: provectuslabs/kafka-ui
    container_name: kafka-ui
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: "Local Kafka Cluster"
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: "broker:19092"
      DYNAMIC_CONFIG_ENABLED: "true"
    depends_on:
      - broker



volumes:
  postgres_db:
    driver: local
  postgres_product_db:
    driver: local
  postgres_inventory_db:
    driver: local
  postgres_order_db:
    driver: local
  kafka_data:
    driver: local
  postgres_user_db:
    driver: local
  postgres_payment_db:
    driver: local
  postgres_notification_db:
    driver: local
  kong_db_data:
    driver: local
  kong_config:
    driver: local


networks:
  default:
    driver: bridge
